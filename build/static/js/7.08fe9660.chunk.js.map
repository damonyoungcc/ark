{"version":3,"sources":["lib/tools/HighLight.tool.tsx","lib/tools/ShowTemplateCode.tool.tsx","lib/components/AutoFocusNext/codeExample/01_autoFocus.example.tsx","lib/components/AutoFocusNext/codeExample/01_autoFocus.code.tsx","lib/components/AutoFocusNext/codeExample/02_autoFocus.example.tsx","lib/components/AutoFocusNext/codeExample/02_autoFocus.code.tsx","lib/components/AutoFocusNext/autoFocusNext.example.tsx"],"names":["App","props","preStyle","textAlign","margin","padding","fontSize","lineStyle","display","lineContentStyle","userSelect","defaultProps","code","language","theme","className","style","tokens","getLineProps","getTokenProps","styless","map","line","i","key","token","ExampleComponent","CodeComponent","title","content","useState","showCode","setShowCode","icon","borderBottom","onClick","in","animation","timeout","size","Demo","value","setValue","onChange","e","target","onFinish","console","log","sensitive"],"mappings":"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","file":"static/js/7.08fe9660.chunk.js","sourcesContent":["import React, { FC } from 'react';\nimport Highlight, { defaultProps } from 'prism-react-renderer';\nimport theme from 'prism-react-renderer/themes/github';\ninterface Props {\n  code: string;\n}\n\nconst App: FC<Props> = (props) => {\n  let preStyle = {\n    textAlign: 'left',\n    margin: '0',\n    padding: '1.5em',\n    fontSize: '14px',\n  };\n\n  const lineStyle = {\n    display: 'table-row',\n  };\n\n  // const lineNoStyle = {\n  //   display: 'table-cell',\n  //   textAlign: 'right',\n  //   paddingRight: '1em',\n  //   userSelect: 'none',\n  //   opacity: '0.5',\n  // };\n\n  const lineContentStyle = {\n    display: 'table-cell',\n    userSelect: 'text',\n  };\n\n  return (\n    <Highlight {...defaultProps} code={props.code} language=\"tsx\" theme={theme}>\n      {({ className, style, tokens, getLineProps, getTokenProps }) => {\n        const styless = {...style, ...preStyle};\n        return (\n          <pre className={className} style={styless as React.CSSProperties}>\n            {tokens.map((line, i) => (\n              <div\n                style={lineStyle as React.CSSProperties}\n                key={i}\n                {...getLineProps({ line, key: i })}\n              >\n                {/* <span style={lineNoStyle as React.CSSProperties}>{i + 1}</span> */}\n                <span style={lineContentStyle as React.CSSProperties}>\n                  <code>\n                    {line.map((token, key) => (\n                      <span key={key} {...getTokenProps({ token, key })} />\n                    ))}\n                  </code>\n                </span>\n              </div>\n            ))}\n          </pre>\n        );\n      }}\n    </Highlight>\n  );\n};\n\nexport default App;\n","import React, { FC, ReactElement, useState } from 'react';\nimport Icon from '../components/Icon/icon';\nimport Transition from '../components/Transition/transition';\nimport './style/show_template.scss';\n\ninterface ShowCodeProps {\n  title: string;\n  ExampleComponent: ReactElement;\n  CodeComponent: ReactElement;\n  content: ReactElement | string;\n}\n\nconst App: FC<ShowCodeProps> = (props) => {\n  const { ExampleComponent, CodeComponent, title, content } = props;\n  const [showCode, setShowCode] = useState(false);\n\n  const handleShowCode = () => {\n    setShowCode(!showCode);\n  };\n\n  return (\n    <div className=\"show-template_wrapper\">\n      <div className=\"template-example\">{ExampleComponent}</div>\n      <div className=\"split-line\">\n        <div className=\"pre-line split-line-item\"></div>\n        <div className=\"template-title\">\n          <span className=\"template-title-text\">{title}</span>\n          <Icon icon=\"pencil-alt\" className=\"template-title-icon\" />\n        </div>\n        <div className=\"after-line split-line-item\"></div>\n      </div>\n      <div className=\"template-content\">{content}</div>\n      <div\n        className=\"template-icon\"\n        style={{ borderBottom: `${showCode ? '1px dashed #f0f0f0' : ''}` }}\n      >\n        <div className=\"icon-wrapper\">\n          <Icon icon=\"copy\" />\n          <Icon icon=\"bug\" />\n          <Icon icon=\"thumbs-up\" />\n          <Icon icon=\"charging-station\" />\n          <Icon\n            icon={showCode ? 'teeth-open' : 'teeth'}\n            onClick={handleShowCode}\n          />\n        </div>\n      </div>\n      <Transition in={showCode} animation=\"zoom-in-top\" timeout={300}>\n        <div className=\"template-code\">{CodeComponent}</div>\n      </Transition>\n    </div>\n  );\n};\n\nexport default App;\n","import React, { FC } from 'react';\nimport AutoFocusNext from '../autoFocusNext';\n\nconst App: FC = () => {\n  return (\n    <div>\n      <AutoFocusNext size=\"small\" />\n      <AutoFocusNext />\n      <AutoFocusNext size=\"large\" />\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport HighLight from '../../../tools/HighLight.tool';\n\nconst Demo = () => {\n  const code = `  import React from 'react';\n  import { AutoFocusNext } from 'arkd';\n\n  const App = () => {\n    return (\n      <div>\n        <AutoFocusNext size=\"small\" />\n        <AutoFocusNext />\n        <AutoFocusNext size=\"large\" />\n      </div>\n    );\n  };\n\n  export default App;`;\n\n  return <HighLight code={code}></HighLight>;\n};\n\nexport default Demo;\n","import React, { FC, useState, ChangeEvent } from 'react';\nimport AutoFocusNext from '../autoFocusNext';\n\nconst App: FC = () => {\n  const [value, setValue] = useState('');\n\n  const handleChange = (e: ChangeEvent<HTMLInputElement>) => {\n    setValue(e.target.value);\n  };\n\n  const onFinish = (e: ChangeEvent<HTMLInputElement>) => {\n    console.log(e.target.value);\n  };\n\n  return (\n    <div>\n      <AutoFocusNext value={value} onChange={handleChange} />\n      <AutoFocusNext onFinish={onFinish} sensitive />\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport HighLight from '../../../tools/HighLight.tool';\n\nconst Demo = () => {\n  const code = `  import React, { ChangeEvent } from 'react';\n  import { AutoFocusNext } from 'arkd';\n\n  const App = () => {\n\n    const [value, setValue] = useState('');\n\n    const handleChange = (e: ChangeEvent<HTMLInputElement>) => {\n      setValue(e.target.value);\n    };\n\n    const onFinish = (e: ChangeEvent<HTMLInputElement>) => {\n      console.log(e.target.value);\n    };\n\n    return (\n      <div>\n        <AutoFocusNext value={value} onChange={handleChange} />\n        <AutoFocusNext onFinish={onFinish} sensitive />\n      </div>\n    );\n\n  export default App;`;\n\n  return <HighLight code={code}></HighLight>;\n};\n\nexport default Demo;\n","import React, { FC } from 'react';\nimport TemplateShow from '../../tools/ShowTemplateCode.tool';\nimport Example01 from './codeExample/01_autoFocus.example';\nimport Code01 from './codeExample/01_autoFocus.code';\nimport Example02 from './codeExample/02_autoFocus.example';\nimport Code02 from './codeExample/02_autoFocus.code';\n\nconst App: FC = () => {\n  return (\n    <div>\n      <h2 className=\"example-h2\">AutoFocusNext 自动聚焦下一个输入框</h2>\n      <p className=\"example-p\">用于验证码等输入场景</p>\n      <h3 className=\"example-h3\">何时使用</h3>\n      <ul className=\"example-ul\">\n        <li>\n          六位验证码：可在有输入验证码场景中使用，输入一个会自动聚集下一个输入框\n        </li>\n        <li>可以在需要脱敏的场景下使用，输入的字符会被替换成*号</li>\n      </ul>\n      <h3 className=\"example-h3\">代码演示</h3>\n      <TemplateShow\n        title=\"基本用法\"\n        CodeComponent={<Code01 />}\n        ExampleComponent={<Example01 />}\n        content={\n          <div>\n            默认是六位输入框，通过设置\n            <code className=\"example-code\">total</code> 改变\n            <code className=\"example-code\">AutoFocusNext</code> 输入框的个数；\n            通过设置\n            <code className=\"example-code\">size</code> 改变\n            <code className=\"example-code\">AutoFocusNext</code> 输入框的大小\n          </div>\n        }\n      />\n      <TemplateShow\n        title=\"受控组件和回调\"\n        CodeComponent={<Code02 />}\n        ExampleComponent={<Example02 />}\n        content={\n          <div>\n            可以像<code className=\"example-code\">Input</code>输入框一样，设置\n            <code className=\"example-code\">value</code>和\n            <code className=\"example-code\">onChange</code>\n            方法，或者在完成输入后，设置回调函数\n            <code className=\"example-code\">onFinish</code>; 设置\n            <code className=\"example-code\">sensitive</code>\n            ，可以保护输入时的隐私\n          </div>\n        }\n      />\n    </div>\n  );\n};\n\nexport default App;\n"],"sourceRoot":""}